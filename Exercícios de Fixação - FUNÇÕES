Funções de String:

-- a)
CREATE TABLE nomes (
    nome VARCHAR(50)
);

INSERT INTO nomes (nome) VALUES
    ('Roberta'),
    ('Roberto'),
    ('Maria Clara'),
    ('João');

-- b) Conversão para maiúsculas
SELECT UPPER(nome) FROM nomes;

-- c) Tamanho de cada nome
SELECT nome, LENGTH(nome) FROM nomes;

-- d) Adicionar prefixo "Sr." ou "Sra."
SELECT
    CASE
        WHEN nome LIKE '%Maria%' THEN CONCAT('Sra. ', nome)
        ELSE CONCAT('Sr. ', nome)
    END AS nome_com_prefixo
FROM nomes;

Funções Numéricas:

-- a)
CREATE TABLE produtos (
    produto VARCHAR(50),
    preco DECIMAL(10, 2),
    quantidade INT
);

-- b) Arredondamento dos preços
SELECT produto, ROUND(preco, 2) AS preco_arredondado FROM produtos;

-- c) Valor absoluto das quantidades
SELECT produto, ABS(quantidade) AS quantidade_absoluta FROM produtos;

-- d) Média dos preços
SELECT AVG(preco) AS media_precos FROM produtos;

Funções de Data:

-- a)
CREATE TABLE eventos (
    data_evento DATE
);

-- b) Inserir data e hora atual
INSERT INTO eventos (data_evento) VALUES (NOW());

-- c) Calcular número de dias entre datas
SELECT DATEDIFF('2023-10-15', '2023-10-10') AS dias_entre_datas;

-- d) Nome do dia da semana
SELECT data_evento, DAYNAME(data_evento) AS dia_da_semana FROM eventos;

Funções de Controle de Fluxo:

-- a) Determinar se um produto está em estoque ou fora de estoque
SELECT produto,
    CASE
        WHEN quantidade > 0 THEN 'Em estoque'
        ELSE 'Fora de estoque'
    END AS status_estoque
FROM produtos;

-- b) Classificar produtos em categorias de preço
SELECT produto,
    CASE
        WHEN preco < 10 THEN 'Barato'
        WHEN preco >= 10 AND preco <= 50 THEN 'Médio'
        ELSE 'Caro'
    END AS categoria_preco
FROM produtos;

Função Personalizada:

-- a) Criação da função TOTAL_VALOR
DELIMITER //
CREATE FUNCTION TOTAL_VALOR(preco DECIMAL(10, 2), quantidade INT)
RETURNS DECIMAL(10, 2)
DETERMINISTIC
BEGIN
    DECLARE total DECIMAL(10, 2);
    SET total = preco * quantidade;
    RETURN total;
END;
//
DELIMITER ;

-- b) Uso da função para calcular o valor total de cada item
SELECT produto, preco, quantidade, TOTAL_VALOR(preco, quantidade) AS valor_total FROM produtos;

Funções de Agregação:

-- a) Contagem total de produtos
SELECT COUNT(*) AS total_produtos FROM produtos;

-- b) Produto mais caro
SELECT MAX(preco) AS produto_mais_caro FROM produtos;

-- c) Produto mais barato
SELECT MIN(preco) AS produto_mais_barato FROM produtos;

-- d) Soma total dos produtos em estoque
SELECT SUM(IF(quantidade > 0, preco * quantidade, 0)) AS total_em_estoque FROM produtos;





